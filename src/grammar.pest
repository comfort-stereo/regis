WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

ignored = _{ COMMENT | (" " | "\n" | "\t" | "\r") }

eoi = _{ !ANY }
br = _{ ("\n" | "\r")+ }

keyword_let = _{ "let" }
keyword_echo = _{ "echo" }
keyword_null = _{ "null" }
keyword_if = _{ "if" }
keyword_else = _{ "else" }
keyword_true = _{ "true" }
keyword_false = _{ "false" }
keyword_loop = _{ "loop" }
keyword_while = _{ "while" }
keyword_break = _{ "break" }
keyword_continue = _{ "continue" }

null = @{ keyword_null }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
boolean = @{ keyword_true | keyword_false }
number = @{ "-"? ~ (ASCII_DIGIT+) ~ ("." ~ ASCII_DIGIT+)? }

atom = _{
      null
    | boolean
    | number
    | identifier
}

wrapped = { "(" ~ br? ~ expression ~ br? ~ ")" }
list = { "[" ~ br? ~ (expression ~ br? ~ "," ~ br?)* ~ expression? ~ br? ~ "]" }

operator_binary_mul = { "*" }
operator_binary_div = { "/" }
operator_binary_add = { "+" }
operator_binary_sub = { "-" }
operator_binary_gt = { ">" }
operator_binary_lt = { "<" }
operator_binary_gte = { ">=" }
operator_binary_lte = { "<=" }
operator_binary_eq = { "==" }
operator_binary_neq = { "!=" }
operator_binary_and = { "&&" }
operator_binary_or = { "||" }
operator_binary_ncl = { "??" }

operator_assign_direct = { "=" }
operator_assign_mul = { "*=" }
operator_assign_div = { "/=" }
operator_assign_add = { "+=" }
operator_assign_sub = { "-=" }
operator_assign_and = { "&&=" }
operator_assign_or = { "||=" }
operator_assign_ncl = { "??=" }

binary_operator = _{
      operator_binary_mul
    | operator_binary_div
    | operator_binary_add
    | operator_binary_sub
    | operator_binary_gte
    | operator_binary_lte
    | operator_binary_gt
    | operator_binary_lt
    | operator_binary_eq
    | operator_binary_neq
    | operator_binary_and
    | operator_binary_or
    | operator_binary_ncl
}

assignment_operator = _{
      operator_assign_direct
    | operator_assign_mul
    | operator_assign_div
    | operator_assign_add
    | operator_assign_sub
    | operator_assign_and
    | operator_assign_or
    | operator_assign_ncl
}

binary_operations = {
    binary_operable_expression ~ br? ~ (binary_operator ~ br? ~ binary_operable_expression)+
}

index_expressions = {
    (indexable_expression) ~ ("[" ~ br? ~ expression ~ br? ~ "]")+
}

binary_operable_expression = _{
      wrapped
    | index_expressions
    | atom
    | list
}

indexable_expression = _{
      wrapped
    | atom
    | list
}

expression = _{
      wrapped
    | index_expressions
    | binary_operations
    | atom
    | list
}

variable_declaration_statement = { keyword_let ~ br? ~ identifier ~ br? ~ "=" ~ br? ~ expression }
variable_assignment_statement = { identifier ~ br? ~ assignment_operator ~ br? ~ expression }
index_assignment_statement = { index_expressions ~ br? ~ assignment_operator ~ br? ~ expression }
break_statement = { keyword_break }
continue_statement = { keyword_continue }
echo_statement = { keyword_echo ~ br? ~ expression }

exec_statement = _{
      variable_declaration_statement
    | variable_assignment_statement
    | index_assignment_statement
    | break_statement
    | continue_statement
    | echo_statement
}

block = { "{" ~ br? ~ statement* ~ exec_statement? ~ br? ~ "}" }
if_statement = { keyword_if ~ br? ~ expression ~ br? ~ block ~ br? ~ else_statement? }
else_statement = { keyword_else ~ br? ~ (block | if_statement) }
loop_statement = { keyword_loop ~ br? ~ block }
while_statement = { keyword_while ~ br? ~ expression ~ br? ~ block }

block_statement = _{
      if_statement
    | else_statement
    | loop_statement
    | while_statement
}

terminator = _{ ";" | br | eoi }

statement = _{
    br?
    ~ (
        (exec_statement ~ terminator)
        | block_statement
    )
    ~ br?
}

//
// Root
//

module = { SOI ~ ignored* ~ statement* ~ ignored* ~ eoi }
